<script>
  declare global {
    interface Window { MyNamespace: any; }
    interface Document {
      startViewTransition?: (cb: () => Promise<void>) => { finished: Promise<void>; };
    }
  }

	let currentIndex = history.state?.index || 0;
	if(!history.state) {
		history.replaceState({index: currentIndex}, document.title);
	}

  async function getHTML(href: string) {
    let res = await fetch(href)
    let html = await res.text();
    return html;
  }

	const parser = new DOMParser();

  async function updateDOM(isBackNav: boolean, htmlPromise: Promise<string>) {
    const html = await htmlPromise;
    const doc = parser.parseFromString(html, 'text/html');
		if(isBackNav) {
			doc.documentElement.classList.add('astro-back-transition');
		}
    document.documentElement.replaceWith(doc.documentElement);
  }

	async function navigate(isBackNav: boolean, href: string) {
		let htmlPromise = getHTML(href);
		let finished: Promise<void>;
		if(isBackNav) {
			document.documentElement.classList.add('astro-back-transition');
		}
		if(document.startViewTransition) {
			finished = document.startViewTransition(() => updateDOM(isBackNav, htmlPromise)).finished;
		} else {
			finished = updateDOM(isBackNav, htmlPromise);
		}
		try {
			await finished;
		} finally {
			if(isBackNav) {
				document.documentElement.classList.remove('astro-back-transition');
			}
		}
	}

  document.addEventListener('click', (ev) => {
		let link = ev.target as HTMLAnchorElement;
		if (link instanceof HTMLAnchorElement &&
			link.href &&
			(!link.target || link.target === '_self') &&
			link.origin === location.origin &&
			ev.button === 0 && // left clicks only
			!ev.metaKey && // new tab (mac)
			!ev.ctrlKey && // new tab (windows)
			!ev.altKey && // download
			!ev.shiftKey &&
			!ev.defaultPrevented
			) {
			ev.preventDefault();
    	navigate(false, link.href);
			history.pushState({index: currentIndex + 1}, '', link.href);
			currentIndex++;
		}
  });
	window.addEventListener('popstate', ev => {
		const index = history.state?.index ?? (currentIndex + 1);
		const direction = index > currentIndex ? 'forward' : 'back';
		console.log('dir', direction, index, currentIndex);
		navigate(direction === 'back', location.href);
		currentIndex = index;
	});
</script>
<style>
	:root {
		--astro-animate-old-slideout: 90ms cubic-bezier(0.4, 0, 1, 1) both astroFadeOut,
			300ms cubic-bezier(0.4, 0, 0.2, 1) both astroSlideToLeft;
		--astro-animate-new-slidein: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both astroFadeIn,
    300ms cubic-bezier(0.4, 0, 0.2, 1) both astroSlideFromRight;
		--astro-animate-back-old-slideout-names: astroFadeOut, astroSlideToRight;
		--astro-animate-back-new-slideout-names: astroFadeIn, astroSlideFromLeft;
	}

	@keyframes astroFadeIn {
		from { opacity: 0; }
	}

	@keyframes astroFadeOut {
		to { opacity: 0; }
	}

	@keyframes astroSlideFromRight {
		from { transform: translateX(100%); }
	}

	@keyframes astroSlideFromLeft {
		from { transform: translateX(-100%); }
	}

	@keyframes astroSlideToRight {
		to { transform: translateX(100%); }
	}

	@keyframes astroSlideToLeft {
		to { transform: translateX(-100%); }
	}
</style>
